{"version":3,"sources":["js/game.js"],"names":["Data","View","EntryPoint","Marionette","Object","extend","initialize","this","triggerMethod","onGetDictionary","_this","localStorage","getItem","$","get","success","dictionary","pickWord","getOption","pickedWords","length","wordId","_","random","onDictionaryStored","onShowWord","view","Game","Main","dataset","word","app","rootView","getRegion","show","bindEvents","childviewEvents","pass","correct","next","onPassWord","console","log","model","set","history","push","onCorrectWord","onNext","e","a","b","timer","Backbone","Model","defaults","guessed","undefined","History","Collection","template","className","options","_this2","delay","accelerometerModelEvents","templateContext","base","width","document","k","delta","size","change","triggers","click [data-action=\"correct\"]","click [data-action=\"pass\"]","onGravityChange","tilt","z","accelerateTilt","conditions","vertical","Math","abs","warningVertical","wordCorrect","wordIncorrect","onNormalState","$el","removeClass","stopVibrate","onWarningState","vibrateInterval","startPeristentVibrate","addClass","onStartSwipeAnimation","_this3","onDisableGuessing","unbindEvents","find","attr","onPass","onBeforeWordDissapearing","onCorrect","window","Entry"],"mappings":"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","file":"js/game.js","sourcesContent":["(function(){\r\nvar Data = {}, View = {};\r\n\r\n\r\nEntryPoint = Marionette.Object.extend({\r\n\tinitialize: function() {\r\n\t\tthis.triggerMethod('get:dictionary');\r\n\t},\r\n\tonGetDictionary: function() {\r\n\t\tif(localStorage.getItem('dictionary')) {\r\n\t\t\tthis.triggerMethod('dictionary:stored',localStorage.getItem('dictionary'))\r\n\t\t} else {\r\n\t\t\t$.get('assets/great_noun_list.json').success(dictionary => {\r\n\t\t\t\tthis.triggerMethod('dictionary:stored', dictionary)\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tpickWord: function() {\r\n\t\t// to do \r\n\t\t// 1. trim dictionary (amount of words === seconds) \r\n\t\t// 2. shuffle trimmed dictionary\r\n\t\t// 3. pick next word \r\n\t\tvar dictionary = this.getOption('dictionary');\r\n\t\tvar pickedWords = this.getOption('pickedWords');\r\n\t\tvar length = dictionary.length;\r\n\t\tvar wordId = _.random(0,length-1);\r\n\t\twhile (typeof pickedWords[wordId] !== 'undefined') {\r\n\t\t\twordId = _.random(0,length-1);\r\n\t\t}\r\n\t\tpickedWords[wordId] = dictionary[wordId];\r\n\t\treturn dictionary[wordId]\r\n\t},\r\n\tonDictionaryStored: function(dictionary) {\r\n\t\tthis.dictionary = dictionary;\r\n\t\tthis.pickedWords = {};\t\r\n\t\tthis.triggerMethod('show:word');\r\n\t},\r\n\tonShowWord: function() {\r\n\t\tthis.view = new Game.View.Main({\r\n\t\t\tdataset: {\r\n\t\t\t\tword: this.pickWord()\r\n\t\t\t}\r\n\t\t});\r\n\t\tapp.rootView.getRegion('content').show(this.view);\r\n\t\tthis.bindEvents(this.view,this.childviewEvents);\r\n\t},\r\n\tchildviewEvents: {\r\n\t\t'pass' \t\t:\t'onPassWord',\r\n\t\t'correct'\t:\t'onCorrectWord',\r\n\t\t'next'\t\t:\t'onNext' \t\r\n\t},\r\n\tonPassWord: function(view) {\r\n\r\n\t\tconsole.log(view);\r\n\t\tview.model.set('guessed',false);\r\n\t\tapp.history.push(view.model);\r\n\t},\r\n\tonCorrectWord: function(view) {\r\n\t\tconsole.log(view);\r\n\t\tview.model.set('guessed',true);\r\n\t\tapp.history.push(view.model);\r\n\t},\r\n\tonNext: function (e,a,b) {\r\n\t\tif (app.timer.view.model.get('time') > 0) {\r\n\t\t\tthis.triggerMethod('show:word');\r\n\t\t}\r\n\r\n\t}\r\n})\r\n\r\nData.Main = Backbone.Model.extend({\r\n\tdefaults: function() {\r\n\t\treturn {\r\n\t\t\tword: 'Default Word',\r\n\t\t\tguessed: undefined\r\n\t\t}\r\n\t}\r\n});\r\nData.History = Backbone.Collection.extend({\r\n\tmodel: Data.Main,\r\n\tinitialize: function() {\r\n\r\n\t}\r\n});\r\n\r\n// word appears | vertical\r\n// word correct | tilted\r\n// word animated | tilted\r\n// word appears | tilted\r\n// word listen accelerometer \r\n\r\napp.history = new Data.History();\r\nView.Main = Marionette.View.extend({\r\n\ttemplate: '#t-main',\r\n\tclassName: 'game-content',\r\n\tinitialize: function(options) {\r\n\t\tthis.model = new Data.Main(options.dataset);\r\n\t\t_.delay(()=>{\r\n\t\t\tthis.bindEvents(app.model,this.accelerometerModelEvents);\r\n\t\t},500);\r\n\t},\r\n\ttemplateContext: function() {\r\n\t\tvar length = this.model.get('word').length;\r\n\t\tvar base = 1;\r\n\t\tvar width = $(document).width();\r\n\t\tvar k = width*0.8/length/16\r\n\t\tvar delta = k < 4 ? k : 4; \r\n\t\treturn {\r\n\t\t\tsize: base+delta\r\n\t\t}\r\n\t},\r\n\taccelerometerModelEvents: {\r\n\t\t'change': 'onGravityChange'\r\n\t},\r\n\ttriggers: {\r\n\t\t'click [data-action=\"correct\"]': 'correct',\r\n\t\t'click [data-action=\"pass\"]': 'pass',\r\n\t},\r\n\tonGravityChange: function(model) {\r\n\t\tvar tilt = model.get('gravity').z;\r\n\t\tvar accelerateTilt = model.get('z');\r\n\t\tvar conditions = {\r\n\t\t\tvertical\t\t : Math.abs(tilt) < 4,\r\n\t\t\twarningVertical\t : Math.abs(tilt) < 6 && Math.abs(tilt) > 4,\r\n\t\t\twordCorrect\t\t : tilt < -4 && accelerateTilt > 0.8,\r\n\t\t\twordIncorrect\t : tilt > 6 && accelerateTilt < -0.8,\r\n\t\t};\r\n\r\n\t\tif (conditions.vertical) {\r\n\t\t\tthis.triggerMethod('normal:state')\r\n\t\t}\r\n\t\tif (conditions.wordCorrect) {\r\n\t\t\tthis.triggerMethod('correct',this);\r\n\t\t}\r\n\t\tif (conditions.wordIncorrect) {\r\n\t\t\tthis.triggerMethod('pass',this);\r\n\t\t}\r\n\t\tif (conditions.warningVertical) {\r\n\t\t\tthis.triggerMethod('warning:state', tilt);\r\n\t\t}\r\n\t},\r\n\tonNormalState: function() {\r\n\t\tthis.$el.removeClass('warning');\r\n\t\tconsole.log('normal:state')\r\n\t\tstopVibrate();\r\n\t},\r\n\tonWarningState: function(tilt) {\r\n\t\tvar vibroFrequencyModifier = (Math.abs(tilt)-4)*100;\r\n\t\tvar baseVibroFrequency = 350;\r\n\t\tvar frequency = vibroFrequencyModifier + baseVibroFrequency;\r\n\t\tif (!vibrateInterval) {\r\n\t\t\tstartPeristentVibrate(50,350);\r\n\t\t}\r\n\t\tconsole.log('warning:state')\r\n\t\tthis.$el.addClass('warning');\r\n\t},\r\n\tonStartSwipeAnimation: function () {\r\n\t\t_.delay(()=>{\r\n\t\t\tthis.$el.addClass('swiped');\r\n\t\t\t_.delay(()=>{\r\n\t\t\t\tthis.triggerMethod('next');\r\n\t\t\t},300);\r\n\t\t},300);\r\n\t},\r\n\tonDisableGuessing: function() {\r\n\t\t// disable accelerometer-way\r\n\t\tthis.unbindEvents(app.model,this.accelerometerModelEvents);\r\n\t\t// disable button-way\r\n\t\tthis.$el.find('[data-action]').attr('disabled','disabled');\t\r\n\t},\r\n\tonPass: function() {\r\n\t\tthis.$el.addClass('pass');\r\n\t\tthis.triggerMethod('disable:guessing');\r\n\t\tthis.triggerMethod('start:swipe:animation');\r\n\t},\r\n\tonBeforeWordDissapearing: function() {\r\n\t\t\r\n\t},\r\n\tonCorrect: function() {\r\n\t\tthis.$el.addClass('correct');\r\n\t\tthis.triggerMethod('disable:guessing');\r\n\r\n\t\tthis.triggerMethod('start:swipe:animation');\r\n\t},\r\n})\r\n\r\nwindow.Game = {\r\n\tView: View,\r\n\tData: Data,\r\n\tEntry: EntryPoint\r\n}\r\n\r\n}());"],"sourceRoot":"/source/"}